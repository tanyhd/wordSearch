{"mappings":"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","sources":["src/js/index.js","src/js/gid.js","src/js/word.js"],"sourcesContent":["import { Grid } from \"./gid\";\r\nimport { Word } from \"./word\";\r\n\r\nconst GRID_SIZE = 20;\r\nconst WORDS = [\"ONE\", \"TWO\", \"THREE\"];\r\n\r\nconst submitWordBtn = document.querySelector(\".submit-word\");\r\nconst grid = new Grid();\r\nconst words = new Word();\r\n\r\nsubmitWordBtn.addEventListener(\"click\", async () => {\r\n    let result = await fetchGridInfo(GRID_SIZE, WORDS);\r\n    let wordInPuzzle = result.wordInPuzzle;\r\n    let contentsArray = result.contents.map(content => content.split(''));\r\n\r\n    grid.renderGrid(GRID_SIZE, contentsArray);\r\n    words.displayWord(wordInPuzzle);\r\n\r\n    //let flattenContentsArray = contentsArray.flat();\r\n    //let contentsString = contentsArray.map(row => row.join(' ')).join('\\n');\r\n    console.log(\"Words In Puzzle: \", wordInPuzzle);\r\n    console.log(\"Contents Array: \", contentsArray);\r\n});\r\n\r\nasync function fetchGridInfo(gridSize, words) {\r\n    let response = await fetch('http://localhost:8080/wordgrid', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n            size: gridSize,\r\n            words: words\r\n        }),\r\n        headers: {\r\n            'Content-type': 'application/json; charset=UTF-8',\r\n        }\r\n    });\r\n    let result = await response.json();\r\n    return result;\r\n}","export class Grid {\r\n\r\n    constructor() {\r\n        this.wordSelectMode = false;\r\n        this.selectedItems = [];\r\n        this.firstSelectedItem;\r\n        this.gridArea = null;\r\n    }\r\n\r\n    getCellsInRange(firstLetter, currentLetter) {\r\n        let cellsInRange = [];\r\n        if (firstLetter.y === currentLetter.y) {\r\n            if (firstLetter.x > currentLetter.x) {\r\n                [currentLetter, firstLetter] = [firstLetter, currentLetter];\r\n            }\r\n            for (let i = firstLetter.x; i <= currentLetter.x; i++) {\r\n                console.log(this.gridArea.querySelector(`td[data-x=\"${i}\"][data-y=\"${currentLetter.y}\"]`));\r\n                cellsInRange.push(this.gridArea.querySelector(`td[data-x=\"${i}\"][data-y=\"${currentLetter.y}\"]`));\r\n            }\r\n        }\r\n        return cellsInRange;\r\n    }\r\n\r\n    renderGrid(gridSize, wordgrid) {\r\n        var gridArea = document.getElementsByClassName(\"grid-area\")[0];\r\n        if (gridArea.lastChild) {\r\n            gridArea.removeChild(gridArea.lastChild);\r\n        }\r\n        this.gridArea = gridArea;\r\n        var tbl = document.createElement(\"table\");\r\n        var tblBody = document.createElement(\"tbody\");\r\n\r\n        for (var i = 0; i < gridSize; i++) {\r\n            var row = document.createElement(\"tr\");\r\n\r\n            for (var j = 0; j < gridSize; j++) {\r\n                var cell = document.createElement(\"td\");\r\n                let letter = wordgrid[i][j];\r\n                var cellText = document.createTextNode(letter);\r\n                cell.appendChild(cellText);\r\n                cell.setAttribute(\"data-x\", i);\r\n                cell.setAttribute(\"data-y\", j);\r\n                cell.setAttribute(\"data-letter\", letter);\r\n                row.appendChild(cell);\r\n            }\r\n            tblBody.appendChild(row);\r\n        }\r\n        tbl.appendChild(tblBody);\r\n        gridArea.appendChild(tbl);\r\n\r\n        // Click Handlers\r\n        gridArea.addEventListener(\"mousedown\", (event) => {\r\n            this.wordSelectMode = true;\r\n            const cell = event.target;\r\n            let x = +cell.getAttribute(\"data-x\");\r\n            let y = +cell.getAttribute(\"data-y\");\r\n            let letter = cell.getAttribute(\"data-letter\");\r\n            this.firstSelectedItem = {\r\n                x, y, letter, cell\r\n            };\r\n        });\r\n\r\n        gridArea.addEventListener(\"mouseup\", (event) => {\r\n            this.wordSelectMode = false;\r\n            this.selectedItems.forEach(item => item.cell.classList.remove(\"selected\"));\r\n\r\n        })\r\n\r\n        gridArea.addEventListener(\"mousemove\", (event) => {\r\n            if (this.wordSelectMode) {\r\n                const cell = event.target;\r\n                let x = +cell.getAttribute(\"data-x\");\r\n                let y = +cell.getAttribute(\"data-y\");\r\n                let letter = cell.getAttribute(\"data-letter\");\r\n\r\n                this.getCellsInRange(this.firstSelectedItem, {x, y})\r\n                .forEach(cell => cell.classList.add(\"selected\"));\r\n            }\r\n        })\r\n    }\r\n} ","export class Word {\r\n    displayWord(words) {\r\n        const wordContainer = document.querySelector(\"#word-container\");\r\n         \r\n        // Clear previous word elements\r\n         wordContainer.innerHTML = \"\";\r\n         \r\n         // Iterate through words and create elements\r\n         for (let word of words) {\r\n            let div = document.createElement(\"div\");\r\n            div.innerText = word;\r\n            wordContainer.appendChild(div);\r\n        }\r\n    }\r\n}"],"names":["$8f6a480bb40b134f$var$WORDS","$8f6a480bb40b134f$var$submitWordBtn","document","querySelector","$8f6a480bb40b134f$var$grid","constructor","this","wordSelectMode","selectedItems","firstSelectedItem","gridArea","getCellsInRange","firstLetter","currentLetter","cellsInRange","y","x","i","console","log","push","renderGrid","gridSize","wordgrid","getElementsByClassName","lastChild","removeChild","tbl","createElement","tblBody","row","j","cell","letter","cellText","createTextNode","appendChild","setAttribute","addEventListener","event","target","getAttribute","forEach","item","classList","remove","add","$8f6a480bb40b134f$var$words","displayWord","words","wordContainer","innerHTML","word","div","innerText","async","result","response","fetch","method","body","JSON","stringify","size","headers","json","$8f6a480bb40b134f$var$fetchGridInfo","wordInPuzzle","contentsArray","contents","map","content","split"],"version":3,"file":"index.be00174d.js.map"}