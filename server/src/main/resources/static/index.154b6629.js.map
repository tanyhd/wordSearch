{"mappings":"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","sources":["src/js/word.js","src/js/gid.js","src/js/index.js"],"sourcesContent":["export class Word {\r\n    displayWord(words) {\r\n        const wordContainer = document.querySelector(\"#word-container\");\r\n         \r\n        // Clear previous word elements\r\n         wordContainer.innerHTML = \"\";\r\n         \r\n         // Iterate through words and create elements\r\n         for (let word of words) {\r\n            let div = document.createElement(\"div\");\r\n            div.innerText = word;\r\n            wordContainer.appendChild(div);\r\n        }\r\n    }\r\n}","import { Word } from \"./word\";\r\nexport class Grid {\r\n\r\n    constructor() {\r\n        this.wordSelectMode = false;\r\n        this.selectedItems = [];\r\n        this.firstSelectedItem;\r\n        this.gridArea = null;\r\n        this.words = [];\r\n        this.foundWords = [];\r\n        this.wordsInPuzzle = [];\r\n    }\r\n\r\n    getCellsInRange(firstLetter, currentLetter) {\r\n        let cellsInRange = [];\r\n        if (firstLetter.x > currentLetter.x || firstLetter.y > currentLetter.y) {\r\n            [currentLetter, firstLetter] = [firstLetter, currentLetter];\r\n        }\r\n        if (firstLetter.y === currentLetter.y) {\r\n            for (let i = firstLetter.x; i <= currentLetter.x; i++) {\r\n                cellsInRange.push(this.gridArea.querySelector(`td[data-x=\"${i}\"][data-y=\"${currentLetter.y}\"]`));\r\n            }\r\n        } else if (firstLetter.x === currentLetter.x) {\r\n            for (let i = firstLetter.y; i <= currentLetter.y; i++) {\r\n                cellsInRange.push(this.gridArea.querySelector(`td[data-x=\"${currentLetter.x}\"][data-y=\"${i}\"]`));\r\n            }\r\n        } else if (currentLetter.y - firstLetter.y === currentLetter.x - firstLetter.x) {\r\n            let delta = currentLetter.y - firstLetter.y;\r\n            for (let i = 0; i <= delta ; i++) {\r\n                cellsInRange.push(this.gridArea.querySelector(`td[data-x=\"${firstLetter.x + i}\"][data-y=\"${firstLetter.y + i}\"]`));\r\n            }\r\n        }\r\n        return cellsInRange;\r\n    }\r\n\r\n    renderGrid(gridSize, wordgrid, wordsInPuzzle) {\r\n        const words = new Word();\r\n        this.wordsInPuzzle = wordsInPuzzle;\r\n        words.displayWord(this.wordsInPuzzle);\r\n        var gridArea = document.getElementsByClassName(\"grid-area\")[0];\r\n        if (gridArea.lastChild) {\r\n            gridArea.removeChild(gridArea.lastChild);\r\n        }\r\n        this.gridArea = gridArea;\r\n        var tbl = document.createElement(\"table\");\r\n        var tblBody = document.createElement(\"tbody\");\r\n\r\n        for (var i = 0; i < gridSize; i++) {\r\n            var row = document.createElement(\"tr\");\r\n\r\n            for (var j = 0; j < gridSize; j++) {\r\n                var cell = document.createElement(\"td\");\r\n                let letter = wordgrid[i][j];\r\n                var cellText = document.createTextNode(letter);\r\n                cell.appendChild(cellText);\r\n                cell.setAttribute(\"data-x\", i);\r\n                cell.setAttribute(\"data-y\", j);\r\n                cell.setAttribute(\"data-letter\", letter);\r\n                row.appendChild(cell);\r\n            }\r\n            tblBody.appendChild(row);\r\n        }\r\n        tbl.appendChild(tblBody);\r\n        gridArea.appendChild(tbl);\r\n\r\n        // Click Handlers\r\n        tbl.addEventListener(\"mousedown\", (event) => {\r\n            this.wordSelectMode = true;\r\n            const cell = event.target;\r\n            let x = +cell.getAttribute(\"data-x\");\r\n            let y = +cell.getAttribute(\"data-y\");\r\n            let letter = cell.getAttribute(\"data-letter\");\r\n            this.firstSelectedItem = {\r\n                x, y, letter, cell\r\n            };\r\n        });\r\n\r\n        tbl.addEventListener(\"mouseup\", (event) => {\r\n            this.wordSelectMode = false;\r\n            const selectedWord = this.selectedItems.reduce((word, cell) => word +=cell.getAttribute(\"data-letter\"), '');\r\n            const reversedSelectedWord = selectedWord.split(\"\").reverse().join(\"\");\r\n            if (this.words.indexOf(selectedWord) !== -1) {\r\n                this.foundWords.push(selectedWord);\r\n            } else if (this.words.indexOf(reversedSelectedWord) !== -1) {\r\n                this.foundWords.push(reversedSelectedWord);\r\n            } else {\r\n                this.selectedItems.forEach(item => item.classList.remove(\"selected\"));\r\n            }\r\n            this.selectedItems = [];\r\n            this.wordsInPuzzle = this.wordsInPuzzle.filter(word => !this.foundWords.includes(word));\r\n            console.log(\"Found words:\", this.foundWords);\r\n            console.log(\"Words In Puzzle\", this.wordsInPuzzle);\r\n            if (this.wordsInPuzzle.length === 0) {\r\n                words.displayWord(this.wordsInPuzzle);\r\n                words.displayWord([\"Congratulation!!!\"])\r\n            } else {\r\n                words.displayWord(this.wordsInPuzzle);\r\n            }\r\n        })\r\n\r\n        tbl.addEventListener(\"mousemove\", (event) => {\r\n            if (this.wordSelectMode) {\r\n                const cell = event.target;\r\n                let x = +cell.getAttribute(\"data-x\");\r\n                let y = +cell.getAttribute(\"data-y\");\r\n                let letter = cell.getAttribute(\"data-letter\");\r\n                this.selectedItems.forEach(cell => cell.classList.remove(\"selected\"));\r\n                this.selectedItems = this.getCellsInRange(this.firstSelectedItem, {x, y});\r\n                this.selectedItems.forEach(cell => cell.classList.add(\"selected\"));\r\n            }\r\n        })\r\n    }\r\n} ","import { Grid } from \"./gid\";\r\nimport { Word } from \"./word\";\r\n\r\nconst submitWordBtn = document.querySelector(\".submit-word\");\r\nconst submitWordBtnRandom = document.querySelector(\".submit-word-Random\")\r\nconst words = new Word();\r\n\r\nsubmitWordBtn.addEventListener(\"click\", async () => {\r\n    const grid = new Grid();\r\n    const commaSeperatedWords = document.querySelector(\"#add-word\").value;\r\n    const wordList = commaSeperatedWords.split(\",\");\r\n    const gridSize = document.querySelector(\"#grid-size\").value;\r\n\r\n    let result = await fetchGridInfo(gridSize, wordList);\r\n    let wordInPuzzle = result.wordInPuzzle;\r\n    let contentsArray = result.contents.map(content => content.split(''));\r\n\r\n    grid.words = wordInPuzzle;\r\n    grid.renderGrid(gridSize, contentsArray, wordInPuzzle);\r\n});\r\n\r\nsubmitWordBtnRandom.addEventListener(\"click\", async () => {\r\n    const grid = new Grid();\r\n    \r\n    let result = await fetchGridInfoRandom();\r\n    let wordInPuzzle = result.wordInPuzzle;\r\n    let gridSize = result.gridSize;\r\n    let contentsArray = result.contents.map(content => content.split(''));\r\n\r\n    grid.words = wordInPuzzle;\r\n    grid.renderGrid(gridSize, contentsArray, wordInPuzzle);\r\n})\r\n\r\nasync function fetchGridInfo(gridSize, words) {\r\n    let response = await fetch('./wordgrid', { //local run -   'http://localhost:8080/wordgrid'\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n            size: gridSize,\r\n            words: words\r\n        }),\r\n        headers: {\r\n            'Content-type': 'application/json; charset=UTF-8',\r\n        }\r\n    });\r\n    let result = await response.json();\r\n    return result;\r\n}\r\n\r\nasync function fetchGridInfoRandom() {\r\n    let response = await fetch('./wordgrid', { //local run -   'http://localhost:8080/wordgrid/randomWordGrid'\r\n        method: 'GET',\r\n        headers: {\r\n            'Content-type': 'application/json; charset=UTF-8',\r\n        }\r\n    });\r\n    let result = await response.json();\r\n    return result;\r\n}"],"names":["$2017232896d0209d$export$1ee6d718c47c2db0","displayWord","words","wordContainer","document","querySelector","innerHTML","word","div","createElement","innerText","appendChild","$c266a63cdf74fc7f$export$ef2184bd89960b14","constructor","this","wordSelectMode","selectedItems","firstSelectedItem","gridArea","foundWords","wordsInPuzzle","getCellsInRange","firstLetter","currentLetter","cellsInRange","x","y","i","push","delta","renderGrid","gridSize","wordgrid","getElementsByClassName","lastChild","removeChild","tbl","tblBody","row","j","cell","letter","cellText","createTextNode","setAttribute","addEventListener","event","target","getAttribute","selectedWord","reduce","reversedSelectedWord","split","reverse","join","indexOf","forEach","item","classList","remove","filter","includes","console","log","length","add","$8f6a480bb40b134f$var$submitWordBtn","$8f6a480bb40b134f$var$submitWordBtnRandom","async","grid","wordList","value","result","response","fetch","method","body","JSON","stringify","size","headers","json","$8f6a480bb40b134f$var$fetchGridInfo","wordInPuzzle","contentsArray","contents","map","content","$8f6a480bb40b134f$var$fetchGridInfoRandom"],"version":3,"file":"index.154b6629.js.map"}